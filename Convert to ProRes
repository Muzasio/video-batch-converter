#!/bin/bash

# Relaunch in gnome-terminal if not in terminal
if [[ -z "$PS1" && -z "$GNOME_TERMINAL_SCREEN" ]]; then
        gnome-terminal -- bash -c "\"$0\" \"$*\"; echo; echo 'Press ENTER to close...'; read"
    exit
fi

# === CONFIGURATION ===
# Use first selected folder from Nautilus or fallback
if [[ -d "$1" ]]; then
    INPUT_DIR="$1"
else
    INPUT_DIR="$HOME/Downloads/edit"
fi

OUTPUT_DIR="$HOME/Downloads/output_prores"
LOG_FILE="$OUTPUT_DIR/convert.log"
ENABLE_LOGGING=false

# Check if ffmpeg is installed
if ! command -v ffmpeg >/dev/null; then
    echo "❌ ffmpeg is not installed. Please install it and try again."
    exit 1
fi

# Ask if user wants to enable logging
read -rp "📝 Enable logging to $LOG_FILE? (y/n): " log_choice
if [[ "$log_choice" == [Yy] ]]; then
    ENABLE_LOGGING=true
    mkdir -p "$OUTPUT_DIR"
    echo "📄 Logging enabled: $LOG_FILE"
else
    echo "🚫 Logging disabled"
fi

# Move to input directory
mkdir -p "$OUTPUT_DIR"
cd "$INPUT_DIR" || { echo "❌ Failed to access input directory: $INPUT_DIR"; exit 1; }

# === FUNCTION: Rename Files ===
rename_files() {
    echo "📁 Renaming files..."
    count=1
    for file in *.mp4 *.mkv; do
        [[ ! -f "$file" ]] && continue
        ext="${file##*.}"
        [[ "$file" =~ ^vid[0-9]+\.(mp4|mkv)$ ]] && {
            echo "🔄 Skipping already named: $file"
            continue
        }
        while [[ -e "vid${count}.${ext}" ]]; do
            ((count++))
        done
        newname="vid${count}.${ext}"
        mv -- "$file" "$newname"
        echo "✅ Renamed $file to $newname"
        ((count++))
    done
}

# === FUNCTION: Convert Files ===
convert_files() {
    echo "🎬 Starting conversion..."
    [[ "$ENABLE_LOGGING" == true ]] && echo "=== CONVERSION STARTED $(date) ===" > "$LOG_FILE"

    for file in vid*.mp4 vid*.mkv; do
        [[ ! -f "$file" ]] && continue
        base="${file%.*}"
        output_file="$OUTPUT_DIR/${base}_prores.mov"

        if [[ -f "$output_file" ]]; then
            echo "⚠️  Already converted: $output_file"
            [[ "$ENABLE_LOGGING" == true ]] && echo "⚠️ Already converted: $output_file" >> "$LOG_FILE"
            continue
        fi

        # Get total duration
        duration=$(ffmpeg -i "$file" 2>&1 | grep Duration | awk '{print $2}' | tr -d ,)
        total_sec=$(echo "$duration" | awk -F: '{ print ($1 * 3600) + ($2 * 60) + $3 }')

        echo "🎞️ Converting: $file → $output_file"
        [[ "$ENABLE_LOGGING" == true ]] && echo "🎞️ Converting: $file → $output_file" >> "$LOG_FILE"

        ffmpeg -hide_banner -y -i "$file" \
            -map 0:v:0 -map 0:a:0? \
            -c:v prores_ks -profile:v 3 -pix_fmt yuv422p10le -threads 0 \
            -c:a pcm_s16le "$output_file" 2>&1 |
        while IFS= read -r line; do
            [[ "$ENABLE_LOGGING" == true ]] && echo "$line" >> "$LOG_FILE"
            if [[ "$line" =~ time=([0-9:.]+) ]]; then
                t="${BASH_REMATCH[1]}"
                seconds=$(echo "$t" | awk -F: '{print ($1 * 3600) + ($2 * 60) + $3}')
                percent=$(echo "$seconds * 100 / $total_sec" | bc)
                echo -ne "\r🔄 Progress: ${percent}% (${t})"
            fi
        done

        echo -e "\n✅ Finished: $output_file"
        [[ "$ENABLE_LOGGING" == true ]] && echo "✅ Finished: $output_file" >> "$LOG_FILE"
    done

    [[ "$ENABLE_LOGGING" == true ]] && echo "=== CONVERSION COMPLETE $(date) ===" >> "$LOG_FILE"
}

# === RUN ===
rename_files
convert_files

echo -e "\n🏁 All conversions complete. Output: $OUTPUT_DIR"
[[ "$ENABLE_LOGGING" == true ]] && echo "📄 Log saved to: $LOG_FILE"

